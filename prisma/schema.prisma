// This is our Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  clerkUserId       String    @unique // Clerk's user ID
  email             String    @unique
  name              String?
  imageUrl          String?
  role              UserRole  @default(UNASSIGNED) // UNASSIGNED, PATIENT, DOCTOR, ADMIN
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Patient-specific fields
  credits           Int       @default(2) // Accumulated credit balance
  
  // Doctor-specific fields
  specialty         String?
  experience        Int?      // Years of experience
  credentialUrl     String?   // Document URL
  description       String?   @db.Text
  verificationStatus VerificationStatus?  @default(PENDING)
  
  // Relations
  patientAppointments Appointment[] @relation("PatientAppointments")
  doctorAppointments  Appointment[] @relation("DoctorAppointments")
  availabilities      Availability[] //for doctor
  transactions        CreditTransaction[]
  payouts             Payout[]
}

enum UserRole {
  UNASSIGNED
  PATIENT
  DOCTOR
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

//Tracks time slots offered by doctors for booking.

/* What's Happening Here
Field	Description
doctorId	A foreign key field (must match a User.id)
doctor	A relation field that links this model to the User model
@relation(fields: [doctorId], references: [id])	Tells Prisma: "doctorId refers to the id field in the User model"
onDelete: Cascade	If a doctor is deleted, their availabilities will also be deleted automatically

 Internally
This creates a FOREIGN KEY (doctorId) REFERENCES User(id) ON DELETE CASCADE in your PostgreSQL database.
*/
model Availability {
  id        String   @id @default(uuid())
  doctorId  String
  doctor    User     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime   DateTime
  status    SlotStatus @default(AVAILABLE)
  
  @@index([doctorId, startTime])
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}
//Tracks each patient-doctor consultation.
model Appointment {
  id                String   @id @default(uuid())
  patientId         String
  patient           User     @relation("PatientAppointments", fields: [patientId], references: [id])
  doctorId          String
  doctor            User     @relation("DoctorAppointments", fields: [doctorId], references: [id])
  startTime         DateTime // Start time of appointment
  endTime           DateTime // End time of appointment
  status            AppointmentStatus @default(SCHEDULED)
  notes             String?  @db.Text // set by doctor after appointment
  patientDescription String? @db.Text // set by patient before appointment
    
  // Video session fields
  videoSessionId    String?  // Vonage Video API Session ID
  videoSessionToken String?  // Optional: Can store tokens if needed
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([status, startTime])
  @@index([doctorId, startTime])
}

/*
Field	Description
patientId	Foreign key â†’ links to User.id
doctorId	Foreign key â†’ also links to User.id
@relation("...")	Distinguishes two separate relationships to the same model (User)
fields: [patientId]	Local field in Appointment
references: [id]	Field in User model being referred to

ðŸ”„ Why Named Relations ("PatientAppointments" & "DoctorAppointments")?
You need to name the relations when:

You reference the same model multiple times in a single model.

It avoids ambiguity during Prisma client generation.
*/

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

/*

 @@index([status, startTime])
  @@index([doctorId, startTime])
ðŸ“ˆ Why These?
Index	Purpose
status + startTime	Efficient querying for all appointments with a certain status (e.g., upcoming = SCHEDULED)
doctorId + startTime	Optimizes fetching all upcoming appointments for a specific doctor

Indexes improve performance but donâ€™t affect relationships directly.

*/

//Tracks changes in credits (both add and deduct):
model CreditTransaction {
  id                String   @id @default(uuid())
  userId            String // Foreign key to User
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount            Int      // Positive for additions, negative for usage
  type              TransactionType
  packageId         String?  // Reference to which package was purchased
  createdAt         DateTime @default(now())
}

enum TransactionType {
  CREDIT_PURCHASE     // Credits purchased through Clerk Billing
  APPOINTMENT_DEDUCTION // Credit used for appointment
  ADMIN_ADJUSTMENT      // Manual adjustment by admin
}
//Tracks payments to doctors for credits earned:
model Payout {
  id              String        @id @default(uuid())
  doctorId        String
  doctor          User          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  amount          Float         // Total payout amount in USD
  credits         Int           // Number of credits being paid out
  platformFee     Float         // Platform fee deducted (2 USD per credit)
  netAmount       Float         // Amount doctor receives (8 USD per credit)
  paypalEmail     String        // Doctor's PayPal email for payout
  status          PayoutStatus  @default(PROCESSING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  processedAt     DateTime?     // When admin marked it as processed
  processedBy     String?       // Admin who processed it

  @@index([status, createdAt])
  @@index([doctorId, status])
}

enum PayoutStatus {
  PROCESSING
  PROCESSED
}